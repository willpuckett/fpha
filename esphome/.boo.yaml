substitutions:
  name: "boo"
  friendly_name: "Burn Out Oven"
  board: "esp32-c3-devkitm-1"
  position_max: "5000"

# board/wifi/ota stuff
packages:
  device_base: !include .esp32.yaml
  tmc_2209: !include 
    file: .tmc_2209.yaml
    vars:
      enable_pin: "2"
      step_pin: "3"
      dir_pin: "4"
      dir_inverted: "True"
      diag_pin: "5"
      acceleration: "500 steps/s^2"
      velocity: "2500 steps/s" # 200 (motor steps) * ${microsteps}
      current: "150ma"
      stall_threshold: "30"
      tcool_threshold: "1000"
      tmc_address: "0x01"
      sense_resistor: "0.15 ohm"
      
esphome:
  on_boot:
    then: 
      script.execute: 
        id: home
        stepper_id: tmc_stepper

# Example configuration entry
web_server:
  port: 80

# For BME280 temp. sensor
i2c:
  sda: 6
  scl: 7

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    reset_pin: D0
    address: 0x3C
    lambda: |-
      it.print(0, 0, id(font), "Hello World!");

# This is just a fake output to make the pid heater happy.
# Ideally, the pin will use the onboard led, but I'm not sure what the pin number is for that...
output:
  - platform: ledc
    pin: 1
    id: heater

button:
  - platform: template
    name: "PID Climate Autotune"
    on_press:
      - climate.pid.autotune: pid_climate

sensor:
  - platform: bme280_i2c
    temperature:
      id: ambient_temperature
      name: "Temperature"
      oversampling: 16x
    pressure:
      name: "Pressure"
      id: ambient_pressure
    humidity:
      name: "Humidity"
      id: ambient_humidity
      # could also be 0x77... defaults to 0x77
    address: 0x76
    # Default is 60s
    update_interval: 60s
  # This sensor takes the output from the pid heater and transforms it to step numbers
  - platform: pid
    name: "PID Climate Heat"
    id: heat_float
    type: HEAT
    filters:
      - or:
        - throttle: 60s
        - delta: 20%
      - lambda: return x * id(endstop_global);
      - round: 0
    on_value:
      then:
      - stepper.set_target:
          id: tmc_stepper
          target: !lambda return x;

# Example configuration entry
climate:
  - platform: pid
    name: "PID Climate Controller"
    id: pid_climate
    sensor: ambient_temperature
    default_target_temperature: 21°C
    heat_output: heater
    control_parameters:
      kp: 0.49460
      ki: 0.00487
      kd: 12.56301
      output_averaging_samples: 5      # smooth the output over 5 samples
      derivative_averaging_samples: 5  # smooth the derivative value over 5 samples
    deadband_parameters:
      threshold_high: 0.5°C
      threshold_low: -1.0°C
      kp_multiplier: 0.0   # proportional gain turned off inside deadband
      ki_multiplier: 0.05  # integral accumulates at only 5% of normal ki
      kd_multiplier: 0.0   # derviative is turned off inside deadband
      deadband_output_averaging_samples: 15   # average the output over 15 samples within the deadband
